diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 0000000..b599b4f
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,3 @@
+cmake_minimum_required(VERSION 3.0)
+project(fftw)
+add_subdirectory(cmake)
diff --git a/cmake/CMakeLists.txt b/cmake/CMakeLists.txt
new file mode 100644
index 0000000..ef52a8b
--- /dev/null
+++ b/cmake/CMakeLists.txt
@@ -0,0 +1,55 @@
+include(flags OPTIONAL)
+set(VER_MAJ 3)
+set(VER_MIN 3)
+set(VER_PT 3)
+set(VER_DOT ${VER_MAJ}.${VER_MIN}.${VER_PT})
+if(NOT DEFINED FFTW_VER)
+  set(FFTW_VER ${VER_DOT})
+elseif(NOT ${FFTW_VER} STREQUAL ${VER_DOT})
+  message(AUTHOR_WARNING "version passed in (${FFTW_VER}) doesn't match internal version (${VER_DOT})")
+endif()
+set(ver _${FFTW_VER})
+set(verDir /${PROJECT_NAME}${ver})
+set(targetsFile ${PROJECT_NAME}${ver}-targets)
+set(fftwroot ${fftw_SOURCE_DIR})
+get_filename_component(fftwroot ${fftwroot} ABSOLUTE)
+include(macros.cmake)
+if(MSVC)
+  add_definitions(-D_CRT_SECURE_NO_WARNINGS)
+  add_definitions(/Oi) # enable intrinsic functions
+endif()
+set(precisions double float long-double)
+foreach(prec ${precisions})
+  set(BENCHFFT_LDOUBLE)
+  set(FFTW_LDOUBLE)
+  set(BENCHFFT_SINGLE)
+  set(FFTW_SINGLE)
+  # NOTE: QUAD not yet supported
+  set(BENCHFFT_QUAD)
+  set(FFTW_QUAD)
+  if(${prec} MATCHES "float")
+    set(BENCHFFT_SINGLE 1)
+    set(FFTW_SINGLE 1)
+    set(pr "f")
+  elseif(${prec} MATCHES "long-double")
+    set(BENCHFFT_LDOUBLE 1)
+    set(FFTW_LDOUBLE 1)
+    set(pr "l")
+  elseif(${prec} MATCHES "double")
+    set(pr "")
+  endif()
+  set(lib_name libfftw${VER_MAJ}${pr}-${VER_MIN})
+  set(cfg_dir ${CMAKE_BINARY_DIR}/${lib_name})
+  set(exe_name bench${pr})
+  if(NOT EXISTS ${cfg_dir})
+    execute_process(COMMAND ${CMAKE_COMMAND} -E make_directory ${cfg_dir})
+  endif()
+  include(config.h.cmake)
+  include(libfftw.cmake)
+  include(bench.cmake)
+endforeach()
+if(GENERATE_CSCOPE)
+  generate_cscope_db()
+endif()
+install(FILES ${fftwroot}/api/fftw3.h DESTINATION include${verDir}/fftw${VER_MAJ})
+install(EXPORT ${targetsFile} DESTINATION lib/cmake)
diff --git a/cmake/bench.cmake b/cmake/bench.cmake
new file mode 100644
index 0000000..947db69
--- /dev/null
+++ b/cmake/bench.cmake
@@ -0,0 +1,37 @@
+#######################################
+# executable dependencies and libraries
+list(APPEND ${exe_name}_deps ${lib_name})
+include(CheckLibraryExists)
+check_library_exists(m sin "${CMAKE_LIBRARY_PATH}" HAVE_LIBM)
+if(HAVE_LIBM)
+  list(APPEND ${exe_name}_deps m) # math library
+endif()
+#######################################
+# executable sources
+set(cmake_srcs
+  ${fftwroot}/cmake/bench.cmake
+  )
+source_group(cmake FILES ${cmake_srcs})
+list(APPEND ${exe_name}_srcs ${cmake_srcs})
+########################
+# bench
+file(GLOB bench_srcs ${fftwroot}/tests/*.c)
+file(GLOB bench_hdrs ${fftwroot}/tests/*.h)
+source_group("Source Files\\bench" FILES ${bench_srcs})
+source_group("Header Files\\bench" FILES ${bench_hdrs})
+list(APPEND ${exe_name}_srcs ${bench_srcs} ${bench_hdrs})
+########################
+# libbench2
+file(GLOB libbench2_srcs ${fftwroot}/libbench2/*.c)
+list(REMOVE_ITEM libbench2_srcs ${fftwroot}/libbench2/useropt.c)
+file(GLOB libbench2_hdrs ${fftwroot}/libbench2/*.h)
+source_group("Source Files\\libbench2" FILES ${libbench2_srcs})
+source_group("Header Files\\libbench2" FILES ${libbench2_hdrs})
+list(APPEND ${exe_name}_srcs ${libbench2_srcs} ${libbench2_hdrs})
+#######################################
+# executable
+add_executable(${exe_name} ${${exe_name}_srcs})
+target_link_libraries(${exe_name} ${${exe_name}_deps})
+target_include_directories(${exe_name} PRIVATE ${fftwroot}/libbench2)
+set_property(TARGET ${exe_name} PROPERTY FOLDER "bench")
+master_src_list_append(${CMAKE_CURRENT_SOURCE_DIR} "${${exe_name}_srcs}")
diff --git a/cmake/config.h.cmake b/cmake/config.h.cmake
new file mode 100644
index 0000000..3373739
--- /dev/null
+++ b/cmake/config.h.cmake
@@ -0,0 +1,212 @@
+include(CheckFunctionExists)
+include(CheckIncludeFile)
+include(CheckLibraryExists)
+include(CheckSymbolExists)
+include(CheckTypeSize)
+
+# BENCHFFT_LDOUBLE - set in CMakeLists.txt
+# BENCHFFT_QUAD - set in CMakeLists.txt
+# BENCHFFT_SINGLE - set in CMakeLists.txt
+#set(CRAY_STACKSEG_END) - NOT USED
+#set(C_ALLOCA) - NOT USED
+set(DISABLE_FORTRAN true)
+set(F77_DUMMY_MAIN)
+set(F77_FUNC)
+set(F77_FUNC_)
+set(F77_FUNC_EQUIV)
+#set(FC_DUMMY_MAIN_EQ_F77) - NOT USED
+if(MSVC)
+  set(FFTW_CC ${CMAKE_C_COMPILER})
+elseif(CMAKE_COMPILER_IS_GNUCXX)
+  if(NOT C_FLAGS_SET)
+    include(CheckCCompilerFlag)
+    set(check_c_flags
+      -std=gnu99
+      -fomit-frame-pointer
+      -mtune=native
+      -malign-double
+      -fstrict-aliasing
+      -fno-schedule-insns
+      -ffast-math
+      )
+    set(idx 0)
+    foreach(flg ${check_c_flags})
+      CHECK_C_COMPILER_FLAG("${flg}" has_flag_${idx})
+      if(has_flag_${idx})
+        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${flg}")
+      endif()
+      math(EXPR idx "${idx}+1")
+    endforeach()
+    set(C_FLAGS_SET true)
+  endif()
+  set(FFTW_CC "gcc ${CMAKE_C_FLAGS}")
+endif()
+set(FFTW_DEBUG)
+set(FFTW_DEBUG_ALIGNMENT)
+set(FFTW_DEBUG_MALLOC)
+set(FFTW_ENABLE_ALLOCA) # TODO: how to detect? configure defines this
+# FFTW_LDOUBLE - set in CMakeLists.txt
+# FFTW_QUAD - set in CMakeLists.txt
+set(FFTW_RANDOM_ESTIMATOR)
+# FFTW_SINGLE - set in CMakeLists.txt
+CHECK_FUNCTION_EXISTS(abort HAVE_ABORT)
+CHECK_FUNCTION_EXISTS(alloca HAVE_ALLOCA) # TODO: configure finds and defines
+CHECK_INCLUDE_FILE(alloca.h HAVE_ALLOCA_H)
+set(HAVE_ALTIVEC)
+set(HAVE_ALTIVEC_H)
+set(HAVE_AVX) # TODO: detect?
+CHECK_FUNCTION_EXISTS(BSDgettimeofday HAVE_BSDGETTIMEOFDAY)
+CHECK_FUNCTION_EXISTS(clock_gettime HAVE_CLOCK_GETTIME)
+CHECK_FUNCTION_EXISTS(cosl HAVE_COSL) # TODO: why not detected? fftw-3.3-libs defined 1
+CHECK_INCLUDE_FILE(c_asm.h HAVE_C_ASM_H)
+CHECK_SYMBOL_EXISTS(cosl math.h HAVE_DECL_COSL)
+#CHECK_SYMBOL_EXISTS(cosq math.h HAVE_DECL_COSQ) - NOT USED
+CHECK_SYMBOL_EXISTS(drand48 stdlib.h HAVE_DECL_DRAND48)
+CHECK_SYMBOL_EXISTS(memalign stdlib.h;malloc.h HAVE_DECL_MEMALIGN)
+CHECK_SYMBOL_EXISTS(posix_memalign stdlib.h HAVE_DECL_POSIX_MEMALIGN)
+CHECK_SYMBOL_EXISTS(sinl math.h HAVE_DECL_SINL)
+#CHECK_SYMBOL_EXISTS(sinq math.h HAVE_DECL_SINQ) - NOT USED
+CHECK_SYMBOL_EXISTS(srand48 stdlib.h HAVE_DECL_SRAND48)
+#CHECK_INCLUDE_FILE(dlfcn.h HAVE_DLFCN_H) - NOT USED
+#set(HAVE_DOPRNT) - NOT USED
+CHECK_FUNCTION_EXISTS(drand48 HAVE_DRAND48)
+set(HAVE_FMA)
+CHECK_FUNCTION_EXISTS(gethrtime HAVE_GETHRTIME)
+CHECK_FUNCTION_EXISTS(gettimeofday HAVE_GETTIMEOFDAY)
+set(HAVE_HRTIME_T)
+CHECK_INCLUDE_FILE(intrinsics.h HAVE_INTRINSICS_H)
+CHECK_INCLUDE_FILE(inttypes.h HAVE_INTTYPES_H)
+CHECK_FUNCTION_EXISTS(isnan HAVE_ISNAN)
+#CHECK_INCLUDE_FILE(libintl.h HAVE_LIBINTL_H) - NOT USED
+#if(UNIX)
+  #CHECK_LIBRARY_EXISTS(m log "" HAVE_LIBM) - NOT USED
+#else()
+  #set(HAVE_LIBM) - NOT USED
+#endif()
+set(HAVE_LIBQUADMATH)
+#CHECK_INCLUDE_FILE(limits.h HAVE_LIMITS_H) - NOT USED
+#CHECK_TYPE_SIZE("long double" LONG_DOUBLE) - NOT USED # HAVE_LONG_DOUBLE holds existence of type
+CHECK_FUNCTION_EXISTS(mach_absolute_time HAVE_MACH_ABSOLUTE_TIME)
+CHECK_INCLUDE_FILE(mach/mach_time.h HAVE_MACH_MACH_TIME_H)
+CHECK_INCLUDE_FILE(malloc.h HAVE_MALLOC_H)
+CHECK_FUNCTION_EXISTS(memalign HAVE_MEMALIGN)
+#CHECK_INCLUDE_FILE(memory.h HAVE_MEMORY_H) - NOT USED
+#CHECK_FUNCTION_EXISTS(memset HAVE_MEMSET) - NOT USED
+set(HAVE_MIPS_ZBUS_TIMER)
+#set(HAVE_MPI) - NOT USED
+set(HAVE_NEON)
+include(FindOpenMP)
+set(HAVE_OPENMP OPENMP_FOUND)
+if(OPENMP_FOUND AND NOT OPENMP_FLAGS_SET)
+  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
+  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
+  set(OPENMP_FLAGS_SET true)
+endif()
+CHECK_FUNCTION_EXISTS(posix_memalign HAVE_POSIX_MEMALIGN)
+#set(HAVE_PTHREAD) - NOT USED
+CHECK_FUNCTION_EXISTS(read_real_time HAVE_READ_REAL_TIME)
+#CHECK_FUNCTION_EXISTS(sinl HAVE_SINL) - NOT USED
+CHECK_FUNCTION_EXISTS(snprintf HAVE_SNPRINTF)
+#CHECK_FUNCTION_EXISTS(sqrt HAVE_SQRT) - NOT USED
+if(FFTW_LDOUBLE)
+  set(HAVE_SSE2)
+else()
+  set(HAVE_SSE2 true)
+  if(MSVC AND NOT SSE2_DEF_SET)
+    add_definitions(/arch:SSE2)
+    set(SSE2_DEF_SET true)
+  endif()
+endif()
+CHECK_INCLUDE_FILE(stddef.h HAVE_STDDEF_H)
+CHECK_INCLUDE_FILE(stdint.h HAVE_STDINT_H)
+CHECK_INCLUDE_FILE(stdlib.h HAVE_STDLIB_H)
+#CHECK_INCLUDE_FILE(strings.h HAVE_STRINGS_H) - NOT USED
+CHECK_INCLUDE_FILE(string.h HAVE_STRING_H)
+CHECK_FUNCTION_EXISTS(sysctl HAVE_SYSCTL)
+#CHECK_INCLUDE_FILE(sys/stat.h HAVE_SYS_STAT_H) - NOT USED
+CHECK_INCLUDE_FILE(sys/sysctl.h HAVE_SYS_SYSCTL_H)
+CHECK_INCLUDE_FILE(sys/time.h HAVE_SYS_TIME_H)
+CHECK_INCLUDE_FILE(sys/types.h HAVE_SYS_TYPES_H)
+#CHECK_FUNCTION_EXISTS(tanl HAVE_TANL) - NOT USED
+set(HAVE_THREADS)
+CHECK_FUNCTION_EXISTS(time_base_to_time HAVE_TIME_BASE_TO_TIME)
+CHECK_TYPE_SIZE(uintptr_t UINTPTR_T) # HAVE_UINTPTR_T holds existence of type
+CHECK_INCLUDE_FILE(unistd.h HAVE_UNISTD_H)
+#CHECK_FUNCTION_EXISTS(vprintf HAVE_VPRINTF) - NOT USED
+#CHECK_FUNCTION_EXISTS(_mm_free HAVE__MM_FREE) - NOT USED
+CHECK_FUNCTION_EXISTS(_mm_malloc HAVE__MM_MALLOC)
+set(HAVE__RTC)
+#set(LT_OBJDIR) - NOT USED
+#set(NO_MINUS_C_MINUS_O) - NOT USED
+
+set(PACKAGE fftw)
+set(PACKAGE_VERSION ${VER_MAJ}.${VER_MIN}.${VER_PT})
+#set(PACKAGE_BUGREPORT fftw@fftw.org) - NOT USED
+#set(PACKAGE_URL http://www.fftw.org) - NOT USED
+#set(PACKAGE_NAME ${PACKAGE}) - NOT USED
+#set(PACKAGE_STRING ${PACKAGE}-${PACKAGE_VERSION}) - NOT USED
+#set(PACKAGE_TARNAME ${PACKAGE}) - NOT USED
+
+#set(PTHREAD_CREATE_JOINABLE) - NOT USED
+CHECK_TYPE_SIZE(double SIZEOF_DOUBLE)
+#CHECK_TYPE_SIZE(fftw_r2r_kind SIZEOF_FFTW_R2R_KIND) - NOT USED
+CHECK_TYPE_SIZE(float SIZEOF_FLOAT)
+#CHECK_TYPE_SIZE(int SIZEOF_INT) - NOT USED
+#CHECK_TYPE_SIZE(long SIZEOF_LONG) - NOT USED
+#CHECK_TYPE_SIZE("long long" SIZEOF_LONG_LONG) - NOT USED
+#CHECK_TYPE_SIZE(MPI_Fint SIZEOF_MPI_FINT) - NOT USED
+#CHECK_TYPE_SIZE(ptrdiff_t SIZEOF_PTRDIFF_T) - NOT USED
+#CHECK_TYPE_SIZE(size_t SIZEOF_SIZE_T) - NOT USED
+CHECK_TYPE_SIZE("unsigned int" SIZEOF_UNSIGNED_INT)
+CHECK_TYPE_SIZE("unsigned long" SIZEOF_UNSIGNED_LONG)
+CHECK_TYPE_SIZE("unsigned long long" SIZEOF_UNSIGNED_LONG_LONG)
+CHECK_TYPE_SIZE("void*" SIZEOF_VOID_P)
+#set(STACK_DIRECTION) - NOT USED
+set(STDC_HEADERS 1)
+if(HAVE_SYS_TIME_H)
+  set(TIME_WITH_SYS_TIME 1)
+else()
+  set(TIME_WITH_SYS_TIME)
+endif()
+#set(USING_POSIX_THREADS) - NOT USED
+set(VERSION ${PACKAGE_VERSION})
+set(WINDOWS_F77_MANGLING)
+set(WITH_G77_WRAPPERS)
+if(MSVC)
+  set(WITH_OUR_MALLOC 1)
+else()
+  set(WITH_OUR_MALLOC)
+endif()
+set(WITH_SLOW_TIMER)
+# const
+if(NOT DEFINED C_INLINE)
+  # test how compiler defines inline (like autoconf's AC_C_INLINE)
+  # http://www.cmake.org/pipermail/cmake/2007-September/016285.html
+  message(STATUS "Determining inline definition")
+  file(WRITE ${CMAKE_BINARY_DIR}/CMakeFiles/test_inline.c
+    "/* Test source lifted from autoconf/c.m4 */\n"
+    "typedef int foo_t;\n"
+    "static inline foo_t static_foo() { return 0; }\n"
+    "foo_t foo() { return 0; }\n"
+    "int main(int argc, char* argv[]) { return 0; }\n"
+    )
+  set(C_INLINE_KEYWORD " ")
+  foreach(KEYWORD inline __inline__ __inline)
+    try_compile(C_HAS_${KEYWORD} ${CMAKE_BINARY_DIR}
+      ${CMAKE_BINARY_DIR}/CMakeFiles/test_inline.c
+      COMPILE_DEFINITIONS "-Dinline=${KEYWORD}"
+      )
+    if(C_HAS_${KEYWORD})
+      set(C_INLINE TRUE CACHE INTERNAL "test_inline: boolean")
+      set(C_INLINE_KEYWORD ${KEYWORD} CACHE INTERNAL "test_inline: keyword")
+    endif()
+  endforeach()
+  if(C_INLINE)
+    message(STATUS "Determining inline definition - done")
+  else()
+    message(STATUS "Determining inline definition - failed")
+  endif()
+endif(NOT DEFINED C_INLINE)
+set(inline ${C_INLINE_KEYWORD})
+# size_t
+configure_file(${fftwroot}/cmake/config.h.in ${cfg_dir}/config.h)
diff --git a/cmake/config.h.in b/cmake/config.h.in
new file mode 100644
index 0000000..9a0bb3a
--- /dev/null
+++ b/cmake/config.h.in
@@ -0,0 +1,405 @@
+/* config.h.in.  Generated from configure.ac by autoheader.  */
+
+/* Define to compile in long-double precision. */
+#cmakedefine BENCHFFT_LDOUBLE
+
+/* Define to compile in quad precision. */
+#cmakedefine BENCHFFT_QUAD
+
+/* Define to compile in single precision. */
+#cmakedefine BENCHFFT_SINGLE
+
+/* Define to one of `_getb67', `GETB67', `getb67' for Cray-2 and Cray-YMP
+   systems. This function is required for `alloca.c' support on those systems.
+   */
+#undef CRAY_STACKSEG_END
+
+/* Define to 1 if using `alloca.c'. */
+#undef C_ALLOCA
+
+/* Define to disable Fortran wrappers. */
+#cmakedefine DISABLE_FORTRAN
+
+/* Define to dummy `main' function (if any) required to link to the Fortran
+   libraries. */
+#cmakedefine F77_DUMMY_MAIN
+
+/* Define to a macro mangling the given C identifier (in lower and upper
+   case), which must not contain underscores, for linking with Fortran. */
+#cmakedefine F77_FUNC
+
+/* As F77_FUNC, but for C identifiers containing underscores. */
+#cmakedefine F77_FUNC_
+
+/* Define if F77_FUNC and F77_FUNC_ are equivalent. */
+#cmakedefine F77_FUNC_EQUIV
+
+/* Define if F77 and FC dummy `main' functions are identical. */
+#undef FC_DUMMY_MAIN_EQ_F77
+
+/* C compiler name and flags */
+#cmakedefine FFTW_CC "@FFTW_CC@"
+
+/* Define to enable extra FFTW debugging code. */
+#cmakedefine FFTW_DEBUG
+
+/* Define to enable alignment debugging hacks. */
+#cmakedefine FFTW_DEBUG_ALIGNMENT
+
+/* Define to enable debugging malloc. */
+#cmakedefine FFTW_DEBUG_MALLOC
+
+/* Define to enable the use of alloca(). */
+#cmakedefine FFTW_ENABLE_ALLOCA
+
+/* Define to compile in long-double precision. */
+#cmakedefine FFTW_LDOUBLE
+
+/* Define to compile in quad precision. */
+#cmakedefine FFTW_QUAD
+
+/* Define to enable pseudorandom estimate planning for debugging. */
+#cmakedefine FFTW_RANDOM_ESTIMATOR
+
+/* Define to compile in single precision. */
+#cmakedefine FFTW_SINGLE
+
+/* Define (not to 1!) if you have the `abort' function. */
+#cmakedefine HAVE_ABORT
+
+/* Define (not to 1!) if you have `alloca', as a function or macro. */
+#cmakedefine HAVE_ALLOCA
+
+/* Define to 1 if you have <alloca.h> and it should be used (not on Ultrix).
+   */
+/* Inconsistent in code: used with #ifdef and #if */
+#cmakedefine HAVE_ALLOCA_H
+
+/* Define (to 1!) to enable Altivec optimizations. */
+/* Inconsistent in code: used with #ifdef and #if */
+#cmakedefine01 HAVE_ALTIVEC
+
+/* Define (not to 1!) if you have the <altivec.h> header file. */
+#cmakedefine HAVE_ALTIVEC_H
+
+/* Define (to 1!) to enable AVX optimizations. */
+/* Inconsistent in code: used with #ifdef and #if */
+#cmakedefine01 HAVE_AVX
+
+/* Define (not to 1!) if you have the `BSDgettimeofday' function. */
+#cmakedefine HAVE_BSDGETTIMEOFDAY
+
+/* Define (not to 1!) if you have the `clock_gettime' function. */
+#cmakedefine HAVE_CLOCK_GETTIME
+
+/* Define to 1 if you have the `cosl' function. */
+#cmakedefine01 HAVE_COSL
+
+/* Define (not to 1!) if you have the <c_asm.h> header file. */
+#cmakedefine HAVE_C_ASM_H
+
+/* Define (not to 1!) if you have the declaration of `cosl', and to 0 if you don't.
+   */
+#cmakedefine HAVE_DECL_COSL
+
+/* Define to 1 if you have the declaration of `cosq', and to 0 if you don't.
+   */
+#undef HAVE_DECL_COSQ
+
+/* Define to 1 if you have the declaration of `drand48', and to 0 if you
+   don't. */
+#cmakedefine01 HAVE_DECL_DRAND48
+
+/* Define to 1 if you have the declaration of `memalign', and to 0 if you
+   don't. */
+#cmakedefine01 HAVE_DECL_MEMALIGN
+
+/* Define to 1 if you have the declaration of `posix_memalign', and to 0 if
+   you don't. */
+#cmakedefine01 HAVE_DECL_POSIX_MEMALIGN
+
+/* Define (not to 1!) if you have the declaration of `sinl', and to 0 if you don't.
+   */
+#cmakedefine HAVE_DECL_SINL
+
+/* Define to 1 if you have the declaration of `sinq', and to 0 if you don't.
+   */
+#undef HAVE_DECL_SINQ
+
+/* Define to 1 if you have the declaration of `srand48', and to 0 if you
+   don't. */
+#cmakedefine01 HAVE_DECL_SRAND48
+
+/* Define to 1 if you have the <dlfcn.h> header file. */
+#undef HAVE_DLFCN_H
+
+/* Define to 1 if you don't have `vprintf' but do have `_doprnt.' */
+#undef HAVE_DOPRNT
+
+/* Define (not to 1!) if you have the `drand48' function. */
+#cmakedefine HAVE_DRAND48
+
+/* Define if you have a machine with fused multiply-add */
+/* Inconsistent in code: used with #ifdef and #if */
+#cmakedefine HAVE_FMA
+
+/* Define (not to 1!) if you have the `gethrtime' function. */
+#cmakedefine HAVE_GETHRTIME
+
+/* Define (not to 1!) if you have the `gettimeofday' function. */
+#cmakedefine HAVE_GETTIMEOFDAY
+
+/* Define (not to 1!) if hrtime_t is defined in <sys/time.h> */
+#cmakedefine HAVE_HRTIME_T
+
+/* Define (not to 1!) if you have the <intrinsics.h> header file. */
+#cmakedefine HAVE_INTRINSICS_H
+
+/* Define to 1 if you have the <inttypes.h> header file. */
+#cmakedefine01 HAVE_INTTYPES_H
+
+/* Define if the isnan() function/macro is available. */
+#cmakedefine HAVE_ISNAN
+
+/* Define to 1 if you have the <libintl.h> header file. */
+#undef HAVE_LIBINTL_H
+
+/* Define to 1 if you have the `m' library (-lm). */
+#undef HAVE_LIBM
+
+/* Define to 1 if you have the `quadmath' library (-lquadmath). */
+#cmakedefine01 HAVE_LIBQUADMATH
+
+/* Define to 1 if you have the <limits.h> header file. */
+#undef HAVE_LIMITS_H
+
+/* Define to 1 if the compiler supports `long double' */
+#undef HAVE_LONG_DOUBLE
+
+/* Define (not to 1!) if you have the `mach_absolute_time' function. */
+#cmakedefine HAVE_MACH_ABSOLUTE_TIME
+
+/* Define (not to 1!) if you have the <mach/mach_time.h> header file. */
+#cmakedefine HAVE_MACH_MACH_TIME_H
+
+/* Define (not to 1!) if you have the <malloc.h> header file. */
+#cmakedefine HAVE_MALLOC_H
+
+/* Define (not to 1!) if you have the `memalign' function. */
+#cmakedefine HAVE_MEMALIGN
+
+/* Define to 1 if you have the <memory.h> header file. */
+#undef HAVE_MEMORY_H
+
+/* Define to 1 if you have the `memset' function. */
+#undef HAVE_MEMSET
+
+/* Define (to 1!) to enable use of MIPS ZBus cycle-counter. */
+#cmakedefine01 HAVE_MIPS_ZBUS_TIMER
+
+/* Define if you have the MPI library. */
+#undef HAVE_MPI
+
+/* Define to enable ARM NEON optimizations. */
+/* Inconsistent in code: used with #ifdef and #if */
+#cmakedefine HAVE_NEON
+
+/* Define if OpenMP is enabled */
+#cmakedefine HAVE_OPENMP
+
+/* Define (not to 1!) if you have the `posix_memalign' function. */
+#cmakedefine HAVE_POSIX_MEMALIGN
+
+/* Define if you have POSIX threads libraries and header files. */
+#undef HAVE_PTHREAD
+
+/* Define (not to 1!) if you have the `read_real_time' function. */
+#cmakedefine HAVE_READ_REAL_TIME
+
+/* Define to 1 if you have the `sinl' function. */
+#undef HAVE_SINL
+
+/* Define (not to 1!) if you have the `snprintf' function. */
+#cmakedefine HAVE_SNPRINTF
+
+/* Define to 1 if you have the `sqrt' function. */
+#undef HAVE_SQRT
+
+/* Define (to 1!) to enable SSE/SSE2 optimizations. */
+/* Inconsistent in code: used with #ifdef and #if */
+#cmakedefine01 HAVE_SSE2
+
+/* Define to 1 if you have the <stddef.h> header file. */
+#cmakedefine01 HAVE_STDDEF_H
+
+/* Define to 1 if you have the <stdint.h> header file. */
+#cmakedefine01 HAVE_STDINT_H
+
+/* Define to 1 if you have the <stdlib.h> header file. */
+#cmakedefine01 HAVE_STDLIB_H
+
+/* Define to 1 if you have the <strings.h> header file. */
+#undef HAVE_STRINGS_H
+
+/* Define (not to 1!) if you have the <string.h> header file. */
+#cmakedefine HAVE_STRING_H
+
+/* Define to 1 if you have the `sysctl' function. */
+#cmakedefine01 HAVE_SYSCTL
+
+/* Define to 1 if you have the <sys/stat.h> header file. */
+#undef HAVE_SYS_STAT_H
+
+/* Define to 1 if you have the <sys/sysctl.h> header file. */
+#cmakedefine01 HAVE_SYS_SYSCTL_H
+
+/* Define to 1 if you have the <sys/time.h> header file. */
+/* Inconsistent in code: used with #ifdef and #if */
+#cmakedefine HAVE_SYS_TIME_H
+
+/* Define to 1 if you have the <sys/types.h> header file. */
+#cmakedefine01 HAVE_SYS_TYPES_H
+
+/* Define to 1 if you have the `tanl' function. */
+#undef HAVE_TANL
+
+/* Define if we have a threads library. */
+#cmakedefine HAVE_THREADS
+
+/* Define (not to 1!) if you have the `time_base_to_time' function. */
+#cmakedefine HAVE_TIME_BASE_TO_TIME
+
+/* Define (not to 1!) if the system has the type `uintptr_t'. */
+#cmakedefine HAVE_UINTPTR_T
+
+/* Define (not to 1!) if you have the <unistd.h> header file. */
+#cmakedefine HAVE_UNISTD_H
+
+/* Define to 1 if you have the `vprintf' function. */
+#undef HAVE_VPRINTF
+
+/* Define to 1 if you have the `_mm_free' function. */
+#undef HAVE__MM_FREE
+
+/* Define (not to 1!) if you have the `_mm_malloc' function. */
+#cmakedefine HAVE__MM_MALLOC
+
+/* Define if you have the UNICOS _rtc() intrinsic. */
+#cmakedefine HAVE__RTC
+
+/* Define to the sub-directory in which libtool stores uninstalled libraries.
+   */
+#undef LT_OBJDIR
+
+/* Define to 1 if your C compiler doesn't accept -c and -o together. */
+#undef NO_MINUS_C_MINUS_O
+
+/* Name of package */
+#cmakedefine PACKAGE "@PACKAGE@"
+
+/* Define to the address where bug reports for this package should be sent. */
+#undef PACKAGE_BUGREPORT
+
+/* Define to the full name of this package. */
+#undef PACKAGE_NAME
+
+/* Define to the full name and version of this package. */
+#undef PACKAGE_STRING
+
+/* Define to the one symbol short name of this package. */
+#undef PACKAGE_TARNAME
+
+/* Define to the home page for this package. */
+#undef PACKAGE_URL
+
+/* Define to the version of this package. */
+#cmakedefine PACKAGE_VERSION "@PACKAGE_VERSION@"
+
+/* Define to necessary symbol if this constant uses a non-standard name on
+   your system. */
+#undef PTHREAD_CREATE_JOINABLE
+
+/* The size of `double', as computed by sizeof. */
+#cmakedefine SIZEOF_DOUBLE @SIZEOF_DOUBLE@
+
+/* The size of `fftw_r2r_kind', as computed by sizeof. */
+#undef SIZEOF_FFTW_R2R_KIND
+
+/* The size of `float', as computed by sizeof. */
+#cmakedefine SIZEOF_FLOAT @SIZEOF_FLOAT@
+
+/* The size of `int', as computed by sizeof. */
+#undef SIZEOF_INT
+
+/* The size of `long', as computed by sizeof. */
+#undef SIZEOF_LONG
+
+/* The size of `long long', as computed by sizeof. */
+#undef SIZEOF_LONG_LONG
+
+/* The size of `MPI_Fint', as computed by sizeof. */
+#undef SIZEOF_MPI_FINT
+
+/* The size of `ptrdiff_t', as computed by sizeof. */
+#undef SIZEOF_PTRDIFF_T
+
+/* The size of `size_t', as computed by sizeof. */
+#undef SIZEOF_SIZE_T
+
+/* The size of `unsigned int', as computed by sizeof. */
+#cmakedefine SIZEOF_UNSIGNED_INT @SIZEOF_UNSIGNED_INT@
+
+/* The size of `unsigned long', as computed by sizeof. */
+#cmakedefine SIZEOF_UNSIGNED_LONG @SIZEOF_UNSIGNED_LONG@
+
+/* The size of `unsigned long long', as computed by sizeof. */
+#cmakedefine SIZEOF_UNSIGNED_LONG_LONG @SIZEOF_UNSIGNED_LONG_LONG@
+
+/* The size of `void *', as computed by sizeof. */
+#cmakedefine SIZEOF_VOID_P @SIZEOF_VOID_P@
+
+/* If using the C implementation of alloca, define if you know the
+   direction of stack growth for your system; otherwise it will be
+   automatically deduced at runtime.
+	STACK_DIRECTION > 0 => grows toward higher addresses
+	STACK_DIRECTION < 0 => grows toward lower addresses
+	STACK_DIRECTION = 0 => direction of growth unknown */
+#undef STACK_DIRECTION
+
+/* Define to 1 if you have the ANSI C header files. */
+#undef STDC_HEADERS
+
+/* Define to 1 if you can safely include both <sys/time.h> and <time.h>. */
+#cmakedefine01 TIME_WITH_SYS_TIME
+
+/* Define if we have and are using POSIX threads. */
+#undef USING_POSIX_THREADS
+
+/* Version number of package */
+#cmakedefine VERSION "@VERSION@"
+
+/* Use common Windows Fortran mangling styles for the Fortran interfaces. */
+#cmakedefine WINDOWS_F77_MANGLING
+
+/* Include g77-compatible wrappers in addition to any other Fortran wrappers.
+   */
+#cmakedefine WITH_G77_WRAPPERS
+
+/* Use our own aligned malloc routine; mainly helpful for Windows systems
+   lacking aligned allocation system-library routines. */
+#cmakedefine WITH_OUR_MALLOC
+
+/* Use low-precision timers, making planner very slow */
+#cmakedefine WITH_SLOW_TIMER
+
+/* Define to empty if `const' does not conform to ANSI C. */
+#cmakedefine const
+
+/* Define to `__inline__' or `__inline' if that's what the C compiler
+   calls it, or to nothing if 'inline' is not supported under any name.  */
+#ifndef __cplusplus
+#cmakedefine inline @inline@
+#endif
+
+/* Define to `unsigned int' if <sys/types.h> does not define. */
+#cmakedefine size_t
diff --git a/cmake/libfftw.cmake b/cmake/libfftw.cmake
new file mode 100644
index 0000000..c9ccf09
--- /dev/null
+++ b/cmake/libfftw.cmake
@@ -0,0 +1,140 @@
+#######################################
+# library sources
+source_group("Header Files" FILES ${cfg_dir}/config.h)
+list(APPEND ${lib_name}_libsrcs ${cfg_dir}/config.h)
+set(cmake_srcs
+  ${fftwroot}/cmake/libfftw.cmake
+  ${fftwroot}/cmake/config.h.cmake
+  ${fftwroot}/cmake/config.h.in
+  )
+source_group(cmake FILES ${cmake_srcs})
+list(APPEND ${lib_name}_libsrcs ${cmake_srcs})
+########################
+# api
+file(GLOB api_srcs ${fftwroot}/api/*.c)
+file(GLOB api_hdrs ${fftwroot}/api/*.h)
+source_group("Source Files\\api" FILES ${api_srcs})
+source_group("Header Files\\api" FILES ${api_hdrs})
+list(APPEND ${lib_name}_libsrcs ${api_srcs} ${api_hdrs})
+########################
+# dft
+file(GLOB dft_srcs ${fftwroot}/dft/*.c)
+file(GLOB dft_hdrs ${fftwroot}/dft/*.h)
+source_group("Source Files\\dft" FILES ${dft_srcs})
+source_group("Header Files\\dft" FILES ${dft_hdrs})
+list(APPEND ${lib_name}_libsrcs ${dft_srcs} ${dft_hdrs})
+#####
+file(GLOB dft_scalar_srcs ${fftwroot}/dft/scalar/*.c)
+file(GLOB dft_scalar_hdrs ${fftwroot}/dft/scalar/*.h)
+source_group("Source Files\\dft\\scalar" FILES ${dft_scalar_srcs})
+source_group("Header Files\\dft\\scalar" FILES ${dft_scalar_hdrs})
+list(APPEND ${lib_name}_libsrcs ${dft_scalar_srcs} ${dft_scalar_hdrs})
+#####
+file(GLOB dft_scalar_codelets_srcs ${fftwroot}/dft/scalar/codelets/*.c)
+source_group("Source Files\\dft\\scalar\\codelets" FILES ${dft_scalar_codelets_srcs})
+list(APPEND ${lib_name}_libsrcs ${dft_scalar_codelets_srcs})
+#####
+file(GLOB dft_simd_hdrs ${fftwroot}/dft/simd/*.h)
+source_group("Header Files\\dft\\simd" FILES ${dft_simd_hdrs})
+list(APPEND ${lib_name}_libsrcs ${dft_simd_hdrs})
+#####
+file(GLOB dft_simd_sse2_srcs ${fftwroot}/dft/simd/sse2/*.c)
+source_group("Source Files\\dft\\simd\\sse2" FILES ${dft_simd_sse2_srcs})
+if(HAVE_SSE2)
+  list(APPEND ${lib_name}_libsrcs ${dft_simd_sse2_srcs})
+endif()
+########################
+# kernel
+file(GLOB kernel_srcs ${fftwroot}/kernel/*.c)
+file(GLOB kernel_hdrs ${fftwroot}/kernel/*.h)
+source_group("Source Files\\kernel" FILES ${kernel_srcs})
+source_group("Header Files\\kernel" FILES ${kernel_hdrs})
+list(APPEND ${lib_name}_libsrcs ${kernel_srcs} ${kernel_hdrs})
+########################
+# rdft
+file(GLOB rdft_srcs ${fftwroot}/rdft/*.c)
+file(GLOB rdft_hdrs ${fftwroot}/rdft/*.h)
+source_group("Source Files\\rdft" FILES ${rdft_srcs})
+source_group("Header Files\\rdft" FILES ${rdft_hdrs})
+list(APPEND ${lib_name}_libsrcs ${rdft_srcs} ${rdft_hdrs})
+#####
+file(GLOB rdft_scalar_srcs ${fftwroot}/rdft/scalar/*.c)
+file(GLOB rdft_scalar_hdrs ${fftwroot}/rdft/scalar/*.h)
+source_group("Source Files\\rdft\\scalar" FILES ${rdft_scalar_srcs})
+source_group("Header Files\\rdft\\scalar" FILES ${rdft_scalar_hdrs})
+list(APPEND ${lib_name}_libsrcs ${rdft_scalar_srcs} ${rdft_scalar_hdrs})
+#####
+file(GLOB rdft_scalar_r2cb_srcs ${fftwroot}/rdft/scalar/r2cb/*.c)
+source_group("Source Files\\rdft\\scalar\\r2cb" FILES ${rdft_scalar_r2cb_srcs})
+list(APPEND ${lib_name}_libsrcs ${rdft_scalar_r2cb_srcs})
+#####
+file(GLOB rdft_scalar_r2cf_srcs ${fftwroot}/rdft/scalar/r2cf/*.c)
+source_group("Source Files\\rdft\\scalar\\r2cf" FILES ${rdft_scalar_r2cf_srcs})
+list(APPEND ${lib_name}_libsrcs ${rdft_scalar_r2cf_srcs})
+#####
+file(GLOB rdft_scalar_r2r_srcs ${fftwroot}/rdft/scalar/r2r/*.c)
+source_group("Source Files\\rdft\\scalar\\r2r" FILES ${rdft_scalar_r2r_srcs})
+list(APPEND ${lib_name}_libsrcs ${rdft_scalar_r2r_srcs})
+#####
+file(GLOB rdft_simd_hdrs ${fftwroot}/rdft/simd/*.h)
+source_group("Header Files\\rdft\\simd" FILES ${rdft_simd_hdrs})
+list(APPEND ${lib_name}_libsrcs ${rdft_simd_hdrs})
+#####
+file(GLOB rdft_simd_sse2_srcs ${fftwroot}/rdft/simd/sse2/*.c)
+source_group("Source Files\\rdft\\simd\\sse2" FILES ${rdft_simd_sse2_srcs})
+if(HAVE_SSE2)
+  list(APPEND ${lib_name}_libsrcs ${rdft_simd_sse2_srcs})
+endif()
+########################
+# reodft
+file(GLOB reodft_srcs ${fftwroot}/reodft/*.c)
+file(GLOB reodft_hdrs ${fftwroot}/reodft/*.h)
+source_group("Source Files\\reodft" FILES ${reodft_srcs})
+source_group("Header Files\\reodft" FILES ${reodft_hdrs})
+list(APPEND ${lib_name}_libsrcs ${reodft_srcs} ${reodft_hdrs})
+########################
+# simd-support
+file(GLOB simdsupport_srcs ${fftwroot}/simd-support/*.c)
+file(GLOB simdsupport_hdrs ${fftwroot}/simd-support/*.h)
+source_group("Source Files\\simd-support" FILES ${simdsupport_srcs})
+source_group("Header Files\\simd-support" FILES ${simdsupport_hdrs})
+list(APPEND ${lib_name}_libsrcs ${simdsupport_srcs} ${simdsupport_hdrs})
+########################
+# threads
+file(GLOB threads_srcs ${fftwroot}/threads/*.c)
+list(REMOVE_ITEM threads_srcs ${fftwroot}/threads/threads.c)
+file(GLOB threads_hdrs ${fftwroot}/threads/*.h)
+source_group("Source Files\\threads" FILES ${threads_srcs})
+source_group("Header Files\\threads" FILES ${threads_hdrs})
+list(APPEND ${lib_name}_libsrcs ${threads_srcs} ${threads_hdrs})
+#######################################
+# library
+add_library(${lib_name} STATIC ${${lib_name}_libsrcs})
+target_include_directories(${lib_name} PUBLIC $<BUILD_INTERFACE:${cfg_dir}>
+  $<BUILD_INTERFACE:${fftwroot}/api>
+  $<BUILD_INTERFACE:${fftwroot}/dft>
+  $<BUILD_INTERFACE:${fftwroot}/kernel>
+  $<BUILD_INTERFACE:${fftwroot}/rdft>
+  PRIVATE
+  ${fftwroot}/dft/scalar
+  ${fftwroot}/dft/simd
+  ${fftwroot}/rdft/scalar
+  ${fftwroot}/rdft/simd
+  ${fftwroot}/reodft
+  ${fftwroot}/simd-support
+  ${fftwroot}/threads
+  )
+set_property(TARGET ${lib_name} PROPERTY COMPILE_DEFINITIONS
+  LIBFFTWF33_EXPORTS
+  )
+set_target_properties(${lib_name} PROPERTIES
+  OUTPUT_NAME ${lib_name}${ver}
+  PREFIX "" # strip off the "lib" prefix, since it's already libfftw
+  )
+set_property(TARGET ${lib_name} PROPERTY FOLDER "libfftw")
+install(TARGETS ${lib_name} EXPORT ${targetsFile}
+  RUNTIME DESTINATION bin
+  LIBRARY DESTINATION lib
+  ARCHIVE DESTINATION lib
+  )
+master_src_list_append(${CMAKE_CURRENT_SOURCE_DIR} "${${lib_name}_libsrcs}")
diff --git a/cmake/macros.cmake b/cmake/macros.cmake
new file mode 100644
index 0000000..37ee5f2
--- /dev/null
+++ b/cmake/macros.cmake
@@ -0,0 +1,37 @@
+macro(generate_cscope_db)
+  file(GLOB cscope_files ${CMAKE_BINARY_DIR}/cscope.*)
+  list(LENGTH cscope_files len)
+  if(NOT ${len} EQUAL 0)
+    file(REMOVE ${cscope_files})
+  endif()
+  list(REMOVE_DUPLICATES master_src_list)
+  file(WRITE ${CMAKE_BINARY_DIR}/cscope.files ${master_src_list})
+  message(STATUS "Generating cscope database")
+  execute_process(COMMAND cscope -b -q -k -i cscope.files
+                  WORKING_DIRECTORY ${CMAKE_BINARY_DIR})
+endmacro()
+
+macro(master_src_list_append _DIR _SRCS)
+  list(APPEND master_src_list ${_DIR}/CMakeLists.txt\n)
+  file(GLOB msvc_files "${_DIR}/*.sln" "${_DIR}/*.vcxproj" "${_DIR}/*.vcxproj.filters")
+  foreach(v ${msvc_files})
+    list(APPEND master_src_list ${v}\n)
+  endforeach()
+  foreach(f ${_SRCS})
+    # remove any relative parts with get_filename_component call
+    # as this will help REMOVE_DUPLICATES
+    if(IS_ABSOLUTE ${f})
+      get_filename_component(f ${f} ABSOLUTE)
+    else()
+      get_filename_component(f ${_DIR}/${f} ABSOLUTE)
+    endif()
+    list(APPEND master_src_list ${f}\n)
+  endforeach()
+  if(NOT ${CMAKE_BINARY_DIR} MATCHES ${CMAKE_CURRENT_BINARY_DIR})
+    set(master_src_list "${master_src_list}" PARENT_SCOPE)
+  endif()
+endmacro()
+
+option(GENERATE_CSCOPE "always update cscope database" OFF)
+set_property(GLOBAL PROPERTY USE_FOLDERS ON) # enables MSVC Solution Folders
+
