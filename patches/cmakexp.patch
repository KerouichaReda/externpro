diff --git a/CMakeLists.txt b/CMakeLists.txt
index 0d6a38c..a8c3cc5 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -99,6 +99,7 @@ endif()
 if(NOT CMake_TEST_EXTERNAL_CMAKE)
   # include special compile flags for some compilers
   include(CompileFlags.cmake)
+  include(flags OPTIONAL)
 
   # check for available C++ features
   include(${CMake_SOURCE_DIR}/Source/Checks/cm_cxx_features.cmake)
@@ -464,6 +465,8 @@ macro (CMAKE_BUILD_UTILITIES)
       set(CURL_CA_BUNDLE "" CACHE FILEPATH "Path to SSL CA Certificate Bundle")
       set(CURL_CA_PATH "" CACHE PATH "Path to SSL CA Certificate Directory")
       mark_as_advanced(CURL_CA_BUNDLE CURL_CA_PATH)
+      option(CMAKE_USE_OPENSSL_MODULE_PATH "Find OpenSSL in CMAKE_MODULE_PATH." OFF)
+      mark_as_advanced(CMAKE_USE_OPENSSL_MODULE_PATH)
     endif()
     add_subdirectory(Utilities/cmcurl)
     CMAKE_SET_TARGET_FOLDER(cmcurl "Utilities/3rdParty")
diff --git a/Utilities/cmcurl/CMakeLists.txt b/Utilities/cmcurl/CMakeLists.txt
index bc8a7dc..0138b0a 100644
--- a/Utilities/cmcurl/CMakeLists.txt
+++ b/Utilities/cmcurl/CMakeLists.txt
@@ -449,11 +449,15 @@ if(CMAKE_USE_SECTRANSP)
 endif()
 
 if(CMAKE_USE_OPENSSL)
-  find_package(OpenSSL)
-  if(NOT OpenSSL_FOUND)
-    message(FATAL_ERROR
-      "Could not find OpenSSL. Install an OpenSSL development package or "
-      "configure CMake with -DCMAKE_USE_OPENSSL=OFF to build without OpenSSL.")
+  if(CMAKE_USE_OPENSSL_MODULE_PATH)
+    find_package(usexp-OpenSSL REQUIRED PATHS ${CMAKE_MODULE_PATH} NO_DEFAULT_PATH)
+  else()
+    find_package(OpenSSL)
+    if(NOT OpenSSL_FOUND)
+      message(FATAL_ERROR
+        "Could not find OpenSSL. Install an OpenSSL development package or "
+        "configure CMake with -DCMAKE_USE_OPENSSL=OFF to build without OpenSSL.")
+    endif()
   endif()
   set(SSL_ENABLED ON)
   set(USE_OPENSSL ON)
diff --git a/Utilities/cmlibarchive/CMakeLists.txt b/Utilities/cmlibarchive/CMakeLists.txt
index 26a9aa9..1254d60 100644
--- a/Utilities/cmlibarchive/CMakeLists.txt
+++ b/Utilities/cmlibarchive/CMakeLists.txt
@@ -546,7 +546,11 @@ ENDIF(ENABLE_NETTLE)
 # (Except on Mac, where OpenSSL is deprecated.)
 #
 IF(ENABLE_OPENSSL AND NOT CMAKE_SYSTEM_NAME MATCHES "Darwin")
-  FIND_PACKAGE(OpenSSL)
+  IF(CMAKE_USE_OPENSSL_MODULE_PATH)
+    FIND_PACKAGE(usexp-OpenSSL REQUIRED PATHS ${CMAKE_MODULE_PATH} NO_DEFAULT_PATH)
+  ELSE()
+    FIND_PACKAGE(OpenSSL)
+  ENDIF()
   IF(OPENSSL_FOUND)
     SET(HAVE_LIBCRYPTO 1)
     INCLUDE_DIRECTORIES(${OPENSSL_INCLUDE_DIR})
@@ -592,16 +596,13 @@ MACRO(CHECK_CRYPTO ALGORITHMS IMPLEMENTATION)
 	IF ("${IMPLEMENTATION}" MATCHES "^OPENSSL$" AND OPENSSL_FOUND)
 	    SET(TRY_CRYPTO_REQUIRED_INCLUDES
 	      "${TRY_CRYPTO_REQUIRED_INCLUDES};${OPENSSL_INCLUDE_DIR}")
-	    SET(TRY_CRYPTO_REQUIRED_LIBS
-	        "-DLINK_LIBRARIES:STRING=${OPENSSL_LIBRARIES}")
+	    SET(TRY_CRYPTO_REQUIRED_LIBS ${OPENSSL_LIBRARIES})
 	ELSEIF("${IMPLEMENTATION}" MATCHES "^NETTLE$" AND NETTLE_FOUND)
 	    SET(TRY_CRYPTO_REQUIRED_INCLUDES
 	      "${TRY_CRYPTO_REQUIRED_INCLUDES};${NETTLE_INCLUDE_DIR}")
-	    SET(TRY_CRYPTO_REQUIRED_LIBS
-	        "-DLINK_LIBRARIES:STRING=${NETTLE_LIBRARY}")
+	    SET(TRY_CRYPTO_REQUIRED_LIBS ${NETTLE_LIBRARY})
 	ELSEIF("${IMPLEMENTATION}" MATCHES "^LIBMD$" AND LIBMD_FOUND)
-	    SET(TRY_CRYPTO_REQUIRED_LIBS
-	        "-DLINK_LIBRARIES:STRING=${LIBMD_LIBRARY}")
+	    SET(TRY_CRYPTO_REQUIRED_LIBS ${LIBMD_LIBRARY})
 	ENDIF("${IMPLEMENTATION}" MATCHES "^OPENSSL$" AND OPENSSL_FOUND)
 
     CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/build/cmake/config.h.in
@@ -638,8 +639,9 @@ main(int argc, char **argv)
 	  ${CMAKE_BINARY_DIR}
 	  ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeTmp/check_crypto_md.c
 	  CMAKE_FLAGS
-	   "${TRY_CRYPTO_REQUIRED_LIBS}"
 	   "${TRY_CRYPTO_REQUIRED_INCLUDES}"
+	  LINK_LIBRARIES
+	   ${TRY_CRYPTO_REQUIRED_LIBS}
 	  OUTPUT_VARIABLE OUTPUT)
 
 	# Inform user whether or not we found it; if not, log why we didn't.
diff --git a/Utilities/cmlibarchive/libarchive/archive_cryptor.c b/Utilities/cmlibarchive/libarchive/archive_cryptor.c
index 71967c9..775c9de 100644
--- a/Utilities/cmlibarchive/libarchive/archive_cryptor.c
+++ b/Utilities/cmlibarchive/libarchive/archive_cryptor.c
@@ -316,7 +316,11 @@ aes_ctr_init(archive_crypto_ctx *ctx, const uint8_t *key, size_t key_len)
 	memcpy(ctx->key, key, key_len);
 	memset(ctx->nonce, 0, sizeof(ctx->nonce));
 	ctx->encr_pos = AES_BLOCK_SIZE;
+#if OPENSSL_API_COMPAT < 0x10100000L
 	EVP_CIPHER_CTX_init(ctx->ctx);
+#else
+	EVP_CIPHER_CTX_reset(ctx->ctx);
+#endif
 	return 0;
 }
 
