diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 0000000..4157227
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,98 @@
+cmake_minimum_required(VERSION 3.0)
+project(libssh2)
+set(lib_name ${PROJECT_NAME})
+include(flags OPTIONAL)
+########################################
+set_property(GLOBAL PROPERTY USE_FOLDERS ON) # enables MSVC Solution Folders
+include(configure.cmake)
+include_directories(include)
+########################################
+# library sources
+set(cmake
+  configure.cmake
+  src/libssh2_config.in
+  )
+source_group(cmake FILES ${cmake})
+list(APPEND ${lib_name}_libsrcs ${cmake})
+####################
+set(libsrcs
+  src/agent.c
+  src/channel.c
+  src/comp.c
+  src/crypt.c
+  src/global.c
+  src/hostkey.c
+  src/keepalive.c
+  src/kex.c
+  src/knownhost.c
+  src/libgcrypt.c
+  src/mac.c
+  src/misc.c
+  src/openssl.c
+  src/packet.c
+  src/pem.c
+  src/publickey.c
+  src/scp.c
+  src/session.c
+  src/sftp.c
+  src/transport.c
+  src/userauth.c
+  src/version.c
+  src/wincng.c
+  )
+source_group(src FILES ${libsrcs})
+list(APPEND ${lib_name}_libsrcs ${libsrcs})
+####################
+set(libhdrs
+  src/channel.h
+  src/comp.h
+  src/crypto.h
+  src/libgcrypt.h
+  src/libssh2_priv.h
+  src/mac.h
+  src/misc.h
+  src/openssl.h
+  src/packet.h
+  src/session.h
+  src/sftp.h
+  src/transport.h
+  src/userauth.h
+  src/wincng.h
+  )
+source_group(hdrs FILES ${libhdrs})
+list(APPEND ${lib_name}_libsrcs ${libhdrs})
+####################
+set(hdrs
+  include/libssh2.h
+  include/libssh2_publickey.h
+  include/libssh2_sftp.h
+  )
+source_group(include FILES ${hdrs})
+list(APPEND ${lib_name}_libsrcs ${hdrs})
+########################################
+# version
+if(NOT DEFINED LIBSSH2_VER)
+  set(LIBSSH2_VER ${VERSION}) # VERSION defined in configure.cmake
+elseif(NOT ${LIBSSH2_VER} STREQUAL ${VERSION})
+  message(AUTHOR_WARNING "version passed in (${LIBSSH2_VER}) doesn't match version from include/libssh2.h (${VERSION})")
+endif()
+set(ver _${LIBSSH2_VER})
+set(verDir /${PROJECT_NAME}${ver})
+########################################
+# library
+add_library(${lib_name} STATIC ${${lib_name}_libsrcs})
+if(LIBSSH2_LIBS)
+  target_link_libraries(${lib_name} ${LIBSSH2_LIBS})
+endif()
+# strip off the "lib" prefix, since it's already libssh2
+set_target_properties(${lib_name} PROPERTIES OUTPUT_NAME ${lib_name}${ver} PREFIX "")
+########################################
+# install
+set(targetsFile ${PROJECT_NAME}${ver}-targets)
+install(TARGETS ${lib_name} EXPORT ${targetsFile}
+  RUNTIME DESTINATION bin
+  ARCHIVE DESTINATION lib
+  LIBRARY DESTINATION lib
+  )
+install(EXPORT ${targetsFile} DESTINATION lib/cmake)
+install(FILES ${hdrs} DESTINATION include${verDir}/${PROJECT_NAME})
diff --git a/configure.cmake b/configure.cmake
new file mode 100644
index 0000000..7da160e
--- /dev/null
+++ b/configure.cmake
@@ -0,0 +1,446 @@
+include(CheckCSourceCompiles)
+include(CheckFunctionExists)
+include(CheckIncludeFile)
+include(CheckLibraryExists)
+include(CheckSymbolExists)
+include(CheckTypeSize)
+include(CMakePushCheckState)
+include(TestBigEndian)
+########################################
+function(set_define var)
+  if(${ARGC} GREATER 1 AND ${var})
+    set(DEFINE_${var} cmakedefine01 PARENT_SCOPE)
+  else()
+    set(DEFINE_${var} cmakedefine PARENT_SCOPE)
+  endif()
+  if(${var})
+    set(LIBSSH2_TEST_DEFINES "${LIBSSH2_TEST_DEFINES} -D${var}" PARENT_SCOPE)
+    set(CMAKE_REQUIRED_DEFINITIONS ${LIBSSH2_TEST_DEFINES} PARENT_SCOPE)
+  endif(${var})
+endfunction()
+##########
+macro(check_include_file_concat incfile var)
+  check_include_file("${incfile}" ${var})
+  set_define(${var} 1)
+  if(${var})
+    set(LIBSSH2_INCLUDES ${LIBSSH2_INCLUDES} ${incfile})
+  endif(${var})
+endmacro()
+##########
+macro(check_exists_define01 func var)
+  if(UNIX)
+    check_function_exists("${func}" ${var})
+  else()
+    check_symbol_exists("${func}" "${LIBSSH2_INCLUDES}" ${var})
+  endif()
+  set_define(${var} 1)
+endmacro()
+##########
+macro(check_library_exists_define lib symbol var)
+  check_library_exists("${lib};${LIBSSH2_LIBS}" ${symbol} "${CMAKE_LIBRARY_PATH}" ${var})
+  set_define(${var} 1)
+endmacro()
+##########
+macro(check_library_exists_concat lib var)
+  if(${var})
+    set(LIBSSH2_LIBS ${lib} ${LIBSSH2_LIBS})
+    set(CMAKE_REQUIRED_LIBRARIES ${LIBSSH2_LIBS})
+  endif(${var})
+endmacro()
+########################################
+check_include_file_concat(windows.h HAVE_WINDOWS_H)
+if(HAVE_WINDOWS_H)
+  set(WIN32_LEAN_AND_MEAN TRUE)
+endif()
+set_define(WIN32_LEAN_AND_MEAN)
+check_include_file_concat(alloca.h HAVE_ALLOCA_H)
+check_include_file_concat(arpa/inet.h HAVE_ARPA_INET_H)
+check_include_file_concat(dlfcn.h HAVE_DLFCN_H)
+check_include_file_concat(errno.h HAVE_ERRNO_H)
+check_include_file_concat(fcntl.h HAVE_FCNTL_H)
+check_include_file_concat(inttypes.h HAVE_INTTYPES_H)
+check_include_file_concat(memory.h HAVE_MEMORY_H)
+check_include_file_concat(netinet/in.h HAVE_NETINET_IN_H)
+check_include_file_concat(ntdef.h HAVE_NTDEF_H)
+check_include_file_concat(ntstatus.h HAVE_NTSTATUS_H)
+check_include_file_concat(stdint.h HAVE_STDINT_H)
+check_include_file_concat(stdio.h HAVE_STDIO_H)
+check_include_file_concat(stdlib.h HAVE_STDLIB_H)
+check_include_file_concat(strings.h HAVE_STRINGS_H)
+check_include_file_concat(string.h HAVE_STRING_H)
+check_include_file_concat(sys/ioctl.h HAVE_SYS_IOCTL_H)
+check_include_file_concat(sys/select.h HAVE_SYS_SELECT_H)
+check_include_file_concat(sys/socket.h HAVE_SYS_SOCKET_H)
+check_include_file_concat(sys/stat.h HAVE_SYS_STAT_H)
+check_include_file_concat(sys/time.h HAVE_SYS_TIME_H)
+check_include_file_concat(sys/types.h HAVE_SYS_TYPES_H)
+check_include_file_concat(sys/uio.h HAVE_SYS_UIO_H)
+check_include_file_concat(sys/un.h HAVE_SYS_UN_H)
+check_include_file_concat(unistd.h HAVE_UNISTD_H)
+check_include_file_concat(winsock2.h HAVE_WINSOCK2_H)
+check_include_file_concat(ws2tcpip.h HAVE_WS2TCPIP_H)
+########################################
+check_library_exists_define(ws2_32 getch HAVE_LIBWS2_32)
+check_library_exists_concat(ws2_32 HAVE_LIBWS2_32)
+##########
+if(NOT CRYPTO_BACKEND)
+  set(CRYPTO_BACKEND NOTFOUND CACHE STRING
+    "The backend to use for cryptography: OpenSSL, Libgcrypt, WinCNG, or NOTFOUND to try any available"
+    )
+else()
+  set(CRYPTO_BACKEND ${CRYPTO_BACKEND} CACHE STRING
+    "The backend to use for cryptography: OpenSSL, Libgcrypt, WinCNG, or NOTFOUND to try any available"
+    )
+  set(SPECIFIC_CRYPTO_REQ REQUIRED)
+endif()
+##########
+if(NOT CRYPTO_BACKEND OR CRYPTO_BACKEND STREQUAL OpenSSL)
+  option(FIND_OPENSSL_MODULE_PATH "Find OpenSSL in CMAKE_MODULE_PATH." OFF)
+  mark_as_advanced(FIND_OPENSSL_MODULE_PATH)
+  if(FIND_OPENSSL_MODULE_PATH)
+    find_package(usexp-OpenSSL ${SPECIFIC_CRYPTO_REQ} PATHS ${CMAKE_MODULE_PATH} NO_DEFAULT_PATH)
+  else()
+    find_package(OpenSSL ${SPECIFIC_CRYPTO_REQ})
+  endif()
+  if(OPENSSL_FOUND)
+    set(CRYPTO_BACKEND OpenSSL)
+    include_directories(${OPENSSL_INCLUDE_DIR})
+    list(APPEND LIBSSH2_LIBS ${OPENSSL_LIBRARIES})
+    set(HAVE_LIBSSL ON)
+    set(LIBSSH2_OPENSSL ON)
+    cmake_push_check_state()
+      set(CMAKE_EXTRA_INCLUDE_FILES "${OPENSSL_INCLUDE_DIR}/openssl/evp.h")
+      set(CMAKE_REQUIRED_LIBRARIES ${OPENSSL_LIBRARIES})
+      check_function_exists(EVP_aes_128_ctr HAVE_EVP_AES_128_CTR)
+    cmake_pop_check_state()
+  endif()
+endif()
+set_define(HAVE_LIBSSL 1)
+set_define(LIBSSH2_OPENSSL 1)
+set_define(HAVE_EVP_AES_128_CTR 1)
+##########
+check_library_exists_define(gcrypt gcry_sexp_build HAVE_LIBGCRYPT)
+if(NOT CRYPTO_BACKEND OR CRYPTO_BACKEND STREQUAL Libgcrypt)
+  if(HAVE_LIBGCRYPT)
+    check_library_exists_concat(gcrypt HAVE_LIBGCRYPT)
+    set(CRYPTO_BACKEND Libgrypt)
+    set(LIBSSH2_LIBGCRYPT ON)
+  elseif(${SPECIFIC_CRYPTO_REQ} STREQUAL "REQUIRED")
+    message(FATAL_ERROR "Required Libgcrypt not found")
+  endif()
+endif()
+set_define(LIBSSH2_LIBGCRYPT 1)
+##########
+check_library_exists_define(bcrypt BCryptEncrypt HAVE_LIBBCRYPT)
+check_library_exists_define(crypt32 CryptMemAlloc HAVE_LIBCRYPT32)
+if(NOT CRYPTO_BACKEND OR CRYPTO_BACKEND STREQUAL WinCNG)
+  if(HAVE_LIBBCRYPT)
+    check_library_exists_concat(bcrypt HAVE_LIBBCRYPT)
+    # reading keys from files is optional and depends on wincrypt
+    check_library_exists_concat(crypt32 HAVE_LIBCRYPT32)
+    set(CRYPTO_BACKEND WinCNG)
+    set(LIBSSH2_WINCNG ON)
+  elseif(${SPECIFIC_CRYPTO_REQ} STREQUAL "REQUIRED")
+    message(FATAL_ERROR "Required WinCNG not available")
+  endif()
+endif()
+set_define(LIBSSH2_WINCNG 1)
+##########
+if(NOT CRYPTO_BACKEND)
+  message(FATAL_ERROR "No suitable cryptography backend available")
+endif()
+########################################
+# zlib cmake options.
+option(CMAKE_USE_ZLIB "Use zlib code." ON)
+mark_as_advanced(CMAKE_USE_ZLIB)
+option(CMAKE_USE_ZLIB_MODULE_PATH "Find zlib in CMAKE_MODULE_PATH." OFF)
+mark_as_advanced(CMAKE_USE_ZLIB_MODULE_PATH)
+# Define if you have the z library.
+if(CMAKE_USE_ZLIB)
+  if(CMAKE_USE_ZLIB_MODULE_PATH)
+    find_package(usexp-ZLIB PATHS ${CMAKE_MODULE_PATH} NO_DEFAULT_PATH)
+  else()
+    find_package(ZLIB)
+  endif()
+  if(ZLIB_FOUND)
+    set(HAVE_LIBZ ON)
+    include_directories(${ZLIB_INCLUDE_DIRS})
+    list(APPEND LIBSSH2_LIBS ${ZLIB_LIBRARIES})
+  else()
+    message(FATAL_ERROR "zlib not found.")
+  endif()
+else()
+  set(HAVE_LIBZ OFF)
+endif()
+set_define(HAVE_LIBZ 1)
+# Compile in zlib support
+set(LIBSSH2_HAVE_ZLIB ${HAVE_LIBZ})
+set_define(LIBSSH2_HAVE_ZLIB 1)
+########################################
+check_symbol_exists(alloca "${LIBSSH2_INCLUDES}" HAVE_ALLOCA)
+set_define(HAVE_ALLOCA 1)
+##########
+check_exists_define01(gettimeofday HAVE_GETTIMEOFDAY)
+check_exists_define01(poll HAVE_POLL)
+check_exists_define01(select HAVE_SELECT)
+check_exists_define01(strtoll HAVE_STRTOLL)
+########################################
+set(CMAKE_EXTRA_INCLUDE_FILES ${LIBSSH2_INCLUDES})
+##########
+# Define to 1 if the compiler supports the 'long long' data type.
+check_type_size("long long" SIZEOF_LONG_LONG)
+if(HAVE_SIZEOF_LONG_LONG)
+  set(HAVE_LONGLONG 1)
+else()
+  set(HAVE_LONGLONG)
+endif()
+set_define(HAVE_LONGLONG 1)
+##########
+# Define to `unsigned int' if <sys/types.h> does not define.
+check_type_size(size_t SIZEOF_SIZE_T)
+if(NOT HAVE_SIZEOF_SIZE_T)
+  set(size_t "unsigned int")
+endif()
+##########
+# Define WORDS_BIGENDIAN to 1 if your processor stores words with the most
+# significant byte first (like Motorola and SPARC, unlike Intel). */
+test_big_endian(WORDS_BIGENDIAN)
+set_define(WORDS_BIGENDIAN 1)
+##########
+set(CMAKE_EXTRA_INCLUDE_FILES)
+########################################
+# Define to the sub-directory in which libtool stores uninstalled libraries.
+execute_process(COMMAND libtool --version
+  OUTPUT_QUIET ERROR_QUIET RESULT_VARIABLE hasLibtool
+  )
+if(hasLibtool EQUAL 0) # 0 == success
+  set(LT_OBJDIR .libs/)
+endif()
+########################################
+# Define if building universal (internal helper macro)
+set(AC_APPLE_UNIVERSAL_BUILD)
+set_define(AC_APPLE_UNIVERSAL_BUILD)
+########################################
+# Define to one of `_getb67', `GETB67', `getb67' for Cray-2 and Cray-YMP
+#  systems. This function is required for `alloca.c' support on those systems.
+set(CRAY_STACKSEG_END)
+set_define(CRAY_STACKSEG_END)
+########################################
+# Define to 1 if using `alloca.c'.
+set(C_ALLOCA) # TODO: determine - not seeing where it's used in code, though
+set_define(C_ALLOCA 1)
+########################################
+# to make a symbol visible
+set(LIBSSH2_API)
+set_define(LIBSSH2_API)
+########################################
+# Enable "none" cipher -- NOT RECOMMENDED
+set(LIBSSH2_CRYPT_NONE)
+set_define(LIBSSH2_CRYPT_NONE)
+########################################
+# Enable newer diffie-hellman-group-exchange-sha1 syntax
+set(LIBSSH2_DH_GEX_NEW TRUE)
+set_define(LIBSSH2_DH_GEX_NEW 1)
+########################################
+# Enable "none" MAC -- NOT RECOMMENDED
+set(LIBSSH2_MAC_NONE)
+set_define(LIBSSH2_MAC_NONE)
+########################################
+# Define to 1 if _REENTRANT preprocessor symbol must be defined.
+if(${CMAKE_SYSTEM_NAME} STREQUAL SunOS)
+  set(NEED_REENTRANT ON)
+else()
+  set(NEED_REENTRANT) # TODO
+endif()
+set_define(NEED_REENTRANT 1)
+########################################
+# If using the C implementation of alloca, define if you know the
+#  direction of stack growth for your system; otherwise it will be
+#  automatically deduced at runtime.
+#    STACK_DIRECTION > 0 => grows toward higher addresses
+#    STACK_DIRECTION < 0 => grows toward lower addresses
+#    STACK_DIRECTION = 0 => direction of growth unknown */
+set(STACK_DIRECTION)
+set_define(STACK_DIRECTION)
+########################################
+# Define to 1 if you have the ANSI C header files.
+set(STDC_HEADERS TRUE) # TODO: determine if true
+set_define(STDC_HEADERS 1)
+########################################
+# Number of bits in a file offset, on hosts where this is settable.
+set(offsetCode "
+#include <sys/types.h>
+ /* Check that off_t can represent 2**63 - 1 correctly.
+    We can't simply define LARGE_OFF_T to be 9223372036854775807,
+    since some C++ compilers compilers masquerading as C compilers
+    incorrectly reject 9223372036854775807.  */
+#define LARGE_OFF_T ((((off_t) 1 << 31) << 31) - 1 + (((off_t) 1 << 31) << 31))
+  int off_t_is_large[(LARGE_OFF_T % 2147483629 == 721
+                       && LARGE_OFF_T % 2147483647 == 1)
+                      ? 1 : -1];
+int main()
+{
+  ;
+  return 0;
+}
+" )
+set(_FILE_OFFSET_BITS) # nothing, by default
+check_c_source_compiles("${offsetCode}" OFFSET_NONE_COMPILES)
+if(NOT OFFSET_NONE_COMPILES)
+  check_c_source_compiles("#define _FILE_OFFSET_BITS 64\n${offsetCode}" OFFSET_64_COMPILES)
+  if(OFFSET_64_COMPILES)
+    set(_FILE_OFFSET_BITS 64)
+  endif()
+endif()
+########################################
+# Define for large files, on AIX-style hosts.
+if(${CMAKE_SYSTEM_NAME} STREQUAL AIX)
+  set(_LARGE_FILES TRUE) # TODO: determine as configure does
+endif()
+set_define(_LARGE_FILES 1)
+########################################
+# Define to empty if `const' does not conform to ANSI C.
+set(const) # TODO
+set_define(const)
+########################################
+# Define to `__inline__' or `__inline' if that's what the C compiler
+# calls it, or to nothing if 'inline' is not supported under any name.  */
+set(inline) # TODO
+set_define(inline)
+###############################################################################
+# disabled non-blocking sockets
+set(HAVE_DISABLED_NONBLOCKING)
+set_define(HAVE_DISABLED_NONBLOCKING 1)
+########################################
+# CHECK_NONBLOCKING_SOCKET
+# Check for how to set a socket to non-blocking state. There seems to exist
+# four known different ways, with the one used almost everywhere being POSIX
+# and XPG3, while the other different ways for different systems (old BSD,
+# Windows and Amiga).
+# There are two known platforms (AIX 3.x and SunOS 4.1.x) where the
+# O_NONBLOCK define is found but does not work. This condition is attempted
+# to get caught in this script by using an excessive number of #ifdefs...
+########################################
+# use O_NONBLOCK for non-blocking sockets
+set(HAVE_O_NONBLOCK)
+# HAVE_O_NONBLOCK (most recent unix versions)
+check_c_source_compiles(" 
+#include <sys/types.h>
+#include <unistd.h>
+#include <fcntl.h>
+#if defined(sun) || defined(__sun__) || defined(__SUNPRO_C) || defined(__SUNPRO_CC)
+# if defined(__SVR4) || defined(__srv4__)
+#  define PLATFORM_SOLARIS
+# else
+#  define PLATFORM_SUNOS4
+# endif
+#endif
+#if (defined(_AIX) || defined(__xlC__)) && !defined(_AIX41)
+# define PLATFORM_AIX_V3
+#endif
+#if defined(PLATFORM_SUNOS4) || defined(PLATFORM_AIX_V3) || defined(__BEOS__)
+#error \"O_NONBLOCK does not work on this platform\"
+#endif
+int main()
+{
+  int socket;
+  int flags = fcntl(socket, F_SETFL, flags | O_NONBLOCK);
+}
+" HAVE_O_NONBLOCK
+  )
+set_define(HAVE_O_NONBLOCK 1)
+##########
+# use FIONBIO for non-blocking sockets
+set(HAVE_FIONBIO) # test below
+# HAVE_FIONBIO (old-style unix and vms)
+check_c_source_compiles(" 
+#include <unistd.h>
+#include <stropts.h>
+int main()
+{
+  int socket;
+  int flags = ioctl(socket, FIONBIO, &flags);
+}
+" HAVE_FIONBIO
+  )
+set_define(HAVE_FIONBIO 1)
+##########
+# use ioctlsocket() for non-blocking sockets
+set(HAVE_IOCTLSOCKET) # test below
+# HAVE_IOCTLSOCKET (Windows)
+cmake_push_check_state()
+if(HAVE_WINDOWS_H AND HAVE_WINSOCK2_H)
+  set(CMAKE_REQUIRED_DEFINITIONS -DHAVE_WINDOWS_H -DHAVE_WINSOCK2_H)
+  set(CMAKE_REQUIRED_LIBRARIES Ws2_32)
+endif()
+check_c_source_compiles(" 
+#ifdef HAVE_WINDOWS_H
+# ifndef WIN32_LEAN_AND_MEAN
+#  define WIN32_LEAN_AND_MEAN
+# endif
+# include <windows.h>
+# ifdef HAVE_WINSOCK2_H
+#  include <winsock2.h>
+# endif
+#endif
+int main()
+{
+  unsigned long flags = ioctlsocket(0, FIONBIO, &flags);
+}
+" HAVE_IOCTLSOCKET
+  )
+cmake_pop_check_state()
+set_define(HAVE_IOCTLSOCKET 1)
+##########
+# use Ioctlsocket() for non-blocking sockets
+set(HAVE_IOCTLSOCKET_CASE) # test below
+# HAVE_IOCTLSOCKET_CASE (Amiga?)
+check_c_source_compiles(" 
+#include <sys/ioctl.h>
+int main()
+{
+ int socket;
+ int flags = IoctlSocket(socket, FIONBIO, (long)1);
+}
+" HAVE_IOCTLSOCKET_CASE
+  )
+set_define(HAVE_IOCTLSOCKET_CASE 1)
+##########
+# use SO_NONBLOCK for non-blocking sockets
+set(HAVE_SO_NONBLOCK) # test below
+# HAVE_SO_NONBLOCK (BeOS)
+check_c_source_compiles(" 
+#include <socket.h>
+int main()
+{
+  long b = 1;
+  int socket;
+  int flags = setsockopt(socket, SOL_SOCKET, SO_NONBLOCK, &b, sizeof(b));
+}
+" HAVE_SO_NONBLOCK
+  )
+set_define(HAVE_SO_NONBLOCK 1)
+########################################
+# Name of package
+set(PACKAGE "libssh2")
+# Version number of package
+file(STRINGS include/libssh2.h verStr REGEX "^#define[\t ]+LIBSSH2_VERSION[\t ]+\".*\".*")
+string(REGEX REPLACE "^#define[\t ]+LIBSSH2_VERSION[\t ]+\"([^\"]+)\".*" "\\1" VERSION "${verStr}")
+# Define to the address where bug reports for this package should be sent.
+set(PACKAGE_BUGREPORT "libssh2-devel@cool.haxx.se")
+# Define to the full name of this package.
+set(PACKAGE_NAME ${PACKAGE})
+# Define to the version of this package.
+set(PACKAGE_VERSION ${VERSION})
+# Define to the full name and version of this package.
+set(PACKAGE_STRING "${PACKAGE} ${PACKAGE_VERSION}")
+# Define to the one symbol short name of this package.
+set(PACKAGE_TARNAME ${PACKAGE})
+# Define to the home page for this package.
+set(PACKAGE_URL)
+###############################################################################
+configure_file(${CMAKE_SOURCE_DIR}/src/libssh2_config.in ${CMAKE_BINARY_DIR}/libssh2_config.in)
+configure_file(${CMAKE_BINARY_DIR}/libssh2_config.in ${CMAKE_BINARY_DIR}/libssh2_config.h)
+set(CMAKE_REQUIRED_LIBRARIES)
+set(CMAKE_REQUIRED_DEFINITIONS)
+include_directories(${CMAKE_BINARY_DIR})
diff --git a/src/libssh2_config.in b/src/libssh2_config.in
new file mode 100644
index 0000000..b819c47
--- /dev/null
+++ b/src/libssh2_config.in
@@ -0,0 +1,266 @@
+/* src/libssh2_config.h. Generated from src/libssh2_config.cmake by cmake.  */
+/* src/libssh2_config.in. Adapted from src/libssh2_config.h.in manually.  */
+
+/* Define if building universal (internal helper macro) */
+#@DEFINE_AC_APPLE_UNIVERSAL_BUILD@ AC_APPLE_UNIVERSAL_BUILD
+
+/* Define to one of `_getb67', `GETB67', `getb67' for Cray-2 and Cray-YMP
+   systems. This function is required for `alloca.c' support on those systems.
+   */
+#@DEFINE_CRAY_STACKSEG_END@ CRAY_STACKSEG_END @CRAY_STACKSEG_END@
+
+/* Define to 1 if using `alloca.c'. */
+#@DEFINE_C_ALLOCA@ C_ALLOCA
+
+/* Define to 1 if you have `alloca', as a function or macro. */
+#@DEFINE_HAVE_ALLOCA@ HAVE_ALLOCA
+
+/* Define to 1 if you have <alloca.h> and it should be used (not on Ultrix).
+   */
+#@DEFINE_HAVE_ALLOCA_H@ HAVE_ALLOCA_H
+
+/* Define to 1 if you have the <arpa/inet.h> header file. */
+#@DEFINE_HAVE_ARPA_INET_H@ HAVE_ARPA_INET_H
+
+/* disabled non-blocking sockets */
+#@DEFINE_HAVE_DISABLED_NONBLOCKING@ HAVE_DISABLED_NONBLOCKING
+
+/* Define to 1 if you have the <dlfcn.h> header file. */
+#@DEFINE_HAVE_DLFCN_H@ HAVE_DLFCN_H
+
+/* Define to 1 if you have the <errno.h> header file. */
+#@DEFINE_HAVE_ERRNO_H@ HAVE_ERRNO_H
+
+/* Define to 1 if you have the `EVP_aes_128_ctr' function. */
+#@DEFINE_HAVE_EVP_AES_128_CTR@ HAVE_EVP_AES_128_CTR
+
+/* Define to 1 if you have the <fcntl.h> header file. */
+#@DEFINE_HAVE_FCNTL_H@ HAVE_FCNTL_H
+
+/* use FIONBIO for non-blocking sockets */
+#@DEFINE_HAVE_FIONBIO@ HAVE_FIONBIO
+
+/* Define to 1 if you have the `gettimeofday' function. */
+#@DEFINE_HAVE_GETTIMEOFDAY@ HAVE_GETTIMEOFDAY
+
+/* Define to 1 if you have the <inttypes.h> header file. */
+#@DEFINE_HAVE_INTTYPES_H@ HAVE_INTTYPES_H
+
+/* use ioctlsocket() for non-blocking sockets */
+#@DEFINE_HAVE_IOCTLSOCKET@ HAVE_IOCTLSOCKET
+
+/* use Ioctlsocket() for non-blocking sockets */
+#@DEFINE_HAVE_IOCTLSOCKET_CASE@ HAVE_IOCTLSOCKET_CASE
+
+/* Define if you have the bcrypt library. */
+#@DEFINE_HAVE_LIBBCRYPT@ HAVE_LIBBCRYPT
+
+/* Define if you have the crypt32 library. */
+#@DEFINE_HAVE_LIBCRYPT32@ HAVE_LIBCRYPT32
+
+/* Define if you have the gcrypt library. */
+#@DEFINE_HAVE_LIBGCRYPT@ HAVE_LIBGCRYPT
+
+/* Define if you have the ssl library. */
+#@DEFINE_HAVE_LIBSSL@ HAVE_LIBSSL
+
+/* Define if you have the z library. */
+#@DEFINE_HAVE_LIBZ@ HAVE_LIBZ
+
+/* Define to 1 if the compiler supports the 'long long' data type. */
+#@DEFINE_HAVE_LONGLONG@ HAVE_LONGLONG
+
+/* Define to 1 if you have the <memory.h> header file. */
+#@DEFINE_HAVE_MEMORY_H@ HAVE_MEMORY_H
+
+/* Define to 1 if you have the <netinet/in.h> header file. */
+#@DEFINE_HAVE_NETINET_IN_H@ HAVE_NETINET_IN_H
+
+/* Define to 1 if you have the <ntdef.h> header file. */
+#@DEFINE_HAVE_NTDEF_H@ HAVE_NTDEF_H
+
+/* Define to 1 if you have the <ntstatus.h> header file. */
+#@DEFINE_HAVE_NTSTATUS_H@ HAVE_NTSTATUS_H
+
+/* use O_NONBLOCK for non-blocking sockets */
+#@DEFINE_HAVE_O_NONBLOCK@ HAVE_O_NONBLOCK
+
+/* Define to 1 if you have the `poll' function. */
+#@DEFINE_HAVE_POLL@ HAVE_POLL
+
+/* Define to 1 if you have the select function. */
+#@DEFINE_HAVE_SELECT@ HAVE_SELECT
+
+/* use SO_NONBLOCK for non-blocking sockets */
+#@DEFINE_HAVE_SO_NONBLOCK@ HAVE_SO_NONBLOCK
+
+/* Define to 1 if you have the <stdint.h> header file. */
+#@DEFINE_HAVE_STDINT_H@ HAVE_STDINT_H
+
+/* Define to 1 if you have the <stdio.h> header file. */
+#@DEFINE_HAVE_STDIO_H@ HAVE_STDIO_H
+
+/* Define to 1 if you have the <stdlib.h> header file. */
+#@DEFINE_HAVE_STDLIB_H@ HAVE_STDLIB_H
+
+/* Define to 1 if you have the <strings.h> header file. */
+#@DEFINE_HAVE_STRINGS_H@ HAVE_STRINGS_H
+
+/* Define to 1 if you have the <string.h> header file. */
+#@DEFINE_HAVE_STRING_H@ HAVE_STRING_H
+
+/* Define to 1 if you have the `strtoll' function. */
+#@DEFINE_HAVE_STRTOLL@ HAVE_STRTOLL
+
+/* Define to 1 if you have the <sys/ioctl.h> header file. */
+#@DEFINE_HAVE_SYS_IOCTL_H@ HAVE_SYS_IOCTL_H
+
+/* Define to 1 if you have the <sys/select.h> header file. */
+#@DEFINE_HAVE_SYS_SELECT_H@ HAVE_SYS_SELECT_H
+
+/* Define to 1 if you have the <sys/socket.h> header file. */
+#@DEFINE_HAVE_SYS_SOCKET_H@ HAVE_SYS_SOCKET_H
+
+/* Define to 1 if you have the <sys/stat.h> header file. */
+#@DEFINE_HAVE_SYS_STAT_H@ HAVE_SYS_STAT_H
+
+/* Define to 1 if you have the <sys/time.h> header file. */
+#@DEFINE_HAVE_SYS_TIME_H@ HAVE_SYS_TIME_H
+
+/* Define to 1 if you have the <sys/types.h> header file. */
+#@DEFINE_HAVE_SYS_TYPES_H@ HAVE_SYS_TYPES_H
+
+/* Define to 1 if you have the <sys/uio.h> header file. */
+#@DEFINE_HAVE_SYS_UIO_H@ HAVE_SYS_UIO_H
+
+/* Define to 1 if you have the <sys/un.h> header file. */
+#@DEFINE_HAVE_SYS_UN_H@ HAVE_SYS_UN_H
+
+/* Define to 1 if you have the <unistd.h> header file. */
+#@DEFINE_HAVE_UNISTD_H@ HAVE_UNISTD_H
+
+/* Define to 1 if you have the <windows.h> header file. */
+#@DEFINE_HAVE_WINDOWS_H@ HAVE_WINDOWS_H
+
+/* Define to 1 if you have the <winsock2.h> header file. */
+#@DEFINE_HAVE_WINSOCK2_H@ HAVE_WINSOCK2_H
+
+/* Define to 1 if you have the <ws2tcpip.h> header file. */
+#@DEFINE_HAVE_WS2TCPIP_H@ HAVE_WS2TCPIP_H
+
+/* to make a symbol visible */
+#@DEFINE_LIBSSH2_API@ LIBSSH2_API
+
+/* Enable "none" cipher -- NOT RECOMMENDED */
+#@DEFINE_LIBSSH2_CRYPT_NONE@ LIBSSH2_CRYPT_NONE
+
+/* Enable newer diffie-hellman-group-exchange-sha1 syntax */
+#@DEFINE_LIBSSH2_DH_GEX_NEW@ LIBSSH2_DH_GEX_NEW
+
+/* Compile in zlib support */
+#@DEFINE_LIBSSH2_HAVE_ZLIB@ LIBSSH2_HAVE_ZLIB
+
+/* Use libgcrypt */
+#@DEFINE_LIBSSH2_LIBGCRYPT@ LIBSSH2_LIBGCRYPT
+
+/* Enable "none" MAC -- NOT RECOMMENDED */
+#@DEFINE_LIBSSH2_MAC_NONE@ LIBSSH2_MAC_NONE
+
+/* Use OpenSSL */
+#@DEFINE_LIBSSH2_OPENSSL@ LIBSSH2_OPENSSL
+
+/* Use Windows CNG */
+#@DEFINE_LIBSSH2_WINCNG@ LIBSSH2_WINCNG
+
+/* Define to the sub-directory in which libtool stores uninstalled libraries.
+   */
+#cmakedefine LT_OBJDIR "@LT_OBJDIR@"
+
+/* Define to 1 if _REENTRANT preprocessor symbol must be defined. */
+#@DEFINE_NEED_REENTRANT@ NEED_REENTRANT
+
+/* Name of package */
+#define PACKAGE "@PACKAGE@"
+
+/* Define to the address where bug reports for this package should be sent. */
+#define PACKAGE_BUGREPORT "@PACKAGE_BUGREPORT@"
+
+/* Define to the full name of this package. */
+#define PACKAGE_NAME "@PACKAGE_NAME@"
+
+/* Define to the full name and version of this package. */
+#define PACKAGE_STRING "@PACKAGE_STRING@"
+
+/* Define to the one symbol short name of this package. */
+#define PACKAGE_TARNAME "@PACKAGE_TARNAME@"
+
+/* Define to the home page for this package. */
+#define PACKAGE_URL "@PACKAGE_URL@"
+
+/* Define to the version of this package. */
+#define PACKAGE_VERSION "@PACKAGE_VERSION@"
+
+/* If using the C implementation of alloca, define if you know the
+   direction of stack growth for your system; otherwise it will be
+   automatically deduced at runtime.
+	STACK_DIRECTION > 0 => grows toward higher addresses
+	STACK_DIRECTION < 0 => grows toward lower addresses
+	STACK_DIRECTION = 0 => direction of growth unknown */
+#@DEFINE_STACK_DIRECTION@ STACK_DIRECTION @STACK_DIRECTION@
+
+/* Define to 1 if you have the ANSI C header files. */
+#@DEFINE_STDC_HEADERS@ STDC_HEADERS
+
+/* Version number of package */
+#define VERSION "@VERSION@"
+
+/* Define WORDS_BIGENDIAN to 1 if your processor stores words with the most
+   significant byte first (like Motorola and SPARC, unlike Intel). */
+#if defined AC_APPLE_UNIVERSAL_BUILD
+# if defined __BIG_ENDIAN__
+#  define WORDS_BIGENDIAN 1
+# endif
+#else
+# ifndef WORDS_BIGENDIAN
+#@DEFINE_WORDS_BIGENDIAN@ WORDS_BIGENDIAN
+# endif
+#endif
+
+/* Enable large inode numbers on Mac OS X 10.5.  */
+#ifndef _DARWIN_USE_64_BIT_INODE
+# define _DARWIN_USE_64_BIT_INODE 1
+#endif
+
+/* Number of bits in a file offset, on hosts where this is settable. */
+#cmakedefine _FILE_OFFSET_BITS @_FILE_OFFSET_BITS@
+
+/* Define for large files, on AIX-style hosts. */
+#@DEFINE__LARGE_FILES@ _LARGE_FILES
+
+/* Define to empty if `const' does not conform to ANSI C. */
+#@DEFINE_const@ const
+
+/* Define to `__inline__' or `__inline' if that's what the C compiler
+   calls it, or to nothing if 'inline' is not supported under any name.  */
+#ifndef __cplusplus
+#@DEFINE_inline@ inline @inline@
+#endif
+
+/* Define to `unsigned int' if <sys/types.h> does not define. */
+#cmakedefine size_t @size_t@
+
+/* from win32/libssh2_config.h */
+#ifdef _MSC_VER
+# ifndef _CRT_SECURE_NO_DEPRECATE
+#  define _CRT_SECURE_NO_DEPRECATE 1
+# endif
+# if _MSC_VER < 1900
+#  define snprintf _snprintf
+# endif
+# if _MSC_VER < 1500
+#  define vsnprintf _vsnprintf
+# endif
+# define strdup _strdup
+# define strncasecmp _strnicmp
+# define strcasecmp _stricmp
+#endif
